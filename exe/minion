#!/usr/bin/env ruby

require "optimist"
require "awesome_print"

require "mel/minion"

SUB_COMMANDS = %w[enable fix help info]

def parse_args(args_to_parse)
  global_opts = Optimist.options(args_to_parse) do
    banner "Swiss army knife programmer's helper"
    stop_on SUB_COMMANDS
  end

  cmd = args_to_parse.shift
  case cmd
  when "help"
    Optimist.educate
  when "info"
    puts "Minion v0.1.0"
    puts "Author: John Doe"
  when "implement"
    cmd_opts = args_to_parse.shift
  when "enable"
    cmd_opts = Optimist.options(args_to_parse) do
      opt :uuid_primary_keys, "Enable UUID as primary keys", type: :boolean
    end

    if cmd_opts[:uuid_primary_keys]
      puts "UUID primary keys enabled"
      puts "... but what about actually doing it?"
    else
      Optimist.educate
    end
  when "fix"
    cmd_opts = Optimist.options(args_to_parse) do
      opt :has_many, "Fix has many relationships", type: :boolean
    end

    if cmd_opts[:has_many]
      puts "Has many relationships fixed"
      puts "... but what about actually doing it?"
    else
      Optimist.educate
    end
  else
    puts "Unknown command"
  end
  {global_options: global_opts,
   subcommand: cmd,
   subcommand_options: cmd_opts,
   remaining_arguments: args_to_parse}
end

options = parse_args ARGV
if options[:subcommand] == "enable"
  if options[:subcommand_options][:uuid_primary_keys]
    puts "slugs again"
    #Mel::Minion::EnableRailsUUIDPrimaryKeys.run
  end
elsif options[:subcommand] == "implement"
  Mel::Minion::Implement.run options[:subcommand_options], *options[:remaining_arguments]
else
  puts "TADA"
  ap options
end
