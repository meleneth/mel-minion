#!/usr/bin/env ruby

require "optimist"
require "awesome_print"

require "mel/minion"

SUB_COMMANDS = %w[enable fix help info]

def parse_args(args_to_parse)
  global_opts = Optimist.options(args_to_parse) do
    banner <<~EOS
      Swiss army knife programmer's helper
      possible sub commands:
      minion enable --uuid-primary-keys
      minion fix
      minion help
      minion info
      minion implement
    EOS
    stop_on SUB_COMMANDS
  end

  cmd = args_to_parse.shift
  case cmd
  when "help"
    Optimist.educate
  when "info"
    puts "Minion v0.1.1"
    puts "Author: John Doe"
  when "implement"
    cmd_opts = args_to_parse.shift
  when "enable"
    cmd_opts = Optimist.options(args_to_parse) do
      opt :uuid_primary_keys, "Enable UUID as primary keys", type: :boolean
    end

    if cmd_opts[:uuid_primary_keys]
    else
      Optimist.educate
    end
  when "has_many"
    cmd_opts[:source] = args_to_parse.shift
    cmd_opts[:destination] = args_to_parse.shift
  else
    puts "Unknown command"
  end
  {global_options: global_opts,
   subcommand: cmd,
   subcommand_options: cmd_opts,
   remaining_arguments: args_to_parse}
end

options = parse_args ARGV
if options[:subcommand] == "enable"
  if options[:subcommand_options][:uuid_primary_keys]
    Mel::Minion::EnableRailsUUIDPrimaryKeys.run
  end
elsif options[:subcommand] == "implement"
  project = Mel::Minion::Project.new
  ap project
  puts "has_lib_dir" if project.has_lib_dir?
  Mel::Minion::Implement::RubyClass.run options[:subcommand_options], *options[:remaining_arguments]
elsif options[:subcommand] == "has_many"
  project = Mel::Minion::Project.new
  Mel::Minion::Implement::RailsHasMany.new options[:subcommand_options][:source], options[:subcommand_options][:destination]
else
  puts "TADA"
  ap options
end
